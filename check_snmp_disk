#!/usr/bin/env perl 

#####
# check_snmp_disk:
# Check script for nagios that will check disk usage statistics
#
# Author: Diddi Oscarsson <diddi@diddi.se>
#####

use warnings;
use strict;

use Nagios::Plugin;
use Net::SNMP qw(:snmp);
use Getopt::Long;
use POSIX;

my $np = Nagios::Plugin->new(
    usage => "Usage: %s -H <host> -r <regexp> -C <community> -w <warning value> -c <critical value>");

$np->add_arg(
    spec => "warning|w=i",
    help => "-w, --warning <integer>. Set what return value should raise a warning.",
);

$np->add_arg(
    spec => "critical|c=i",
    help => "-c, --critical <integer>. Set what return value should raise a critical.",
);

$np->add_arg(
    spec => "host|H=s",
    help => "-H, --host <hostname>. Set the host/ip to send snmp queries to.",
    required => 1,
);

$np->add_arg(
    spec => "regex|r=s",
    help => "-r, --regex <regex>. Regexp for disk description.",
    required => 1,
);

$np->add_arg(
    spec => "community|C=s",
    help => "-C, --community <community>. Set the SNMP community to use for the query.",
    required => 1,
);


$np->getopts;
my $regex = $np->opts->regex;
my $diskID = undef;
my $disk_size = undef;
my $disk_used = undef;
my $OID_Table = '1.3.6.1.2.1.25.2.3.1.3';

my ($session, $error) = Net::SNMP->session(
    -hostname => $np->opts->host,
    -community => $np->opts->community,
    -nonblocking => 1,
    -timeout   => "5",
    -port      => "161",
    -version   => 'snmpv2c',
);

if(not defined($session)) {
    printf("ERROR: %s.\n", $error);
    exit(UNKNOWN);
}


my %table; # Hash to store the results
my $result = $session->get_bulk_request(
   -varbindlist    => [ $OID_Table ],
   -callback       => [ \&table_callback, \%table ],
   -maxrepetitions => 10,
);

if (!defined $result) {
   printf "ERROR: %s\n", $session->error();
   $session->close();
   exit (UNKNOWN);
}

# Now initiate the SNMP message exchange.
snmp_dispatcher();
$session->close();
$session = undef;

# Look for a matching disk
for my $oid (oid_lex_sort(keys %table)) {
    if($table{$oid} =~ /$regex/) {
        $diskID = $1 if $oid =~ /\.([0-9]+)$/;
        last;
    }
}

if(not defined $diskID) {
    print "Could not find a matching disk\n";
    exit(0);
}
my $size_oid = "1.3.6.1.2.1.25.2.3.1.5.$diskID";
my $used_oid = "1.3.6.1.2.1.25.2.3.1.6.$diskID";

($session, $error) = Net::SNMP->session(
    -hostname => $np->opts->host,
    -community => $np->opts->community,
);

$result = $session->get_request(-varbindlist => [ $size_oid, $used_oid ] );
my $result_hash = $session->var_bind_list();

$disk_size = $result_hash->{$size_oid};
$disk_used = $result_hash->{$used_oid};

my $value = ceil(($disk_used/$disk_size)*100);

$session->close();

if($value > $np->opts->warning and $value < $np->opts->critical) {
    printf("SNMP WARN: %s%%\n", $value);
    exit(WARNING);
}

if($value > $np->opts->critical) {
    printf("SNMP CRIT: %s%%\n", $value);
    exit(CRITICAL);
}

printf("SNMP OK: %s%%\n", $value);
exit(OK);

sub table_callback
{
   my ($session, $table) = @_;

   my $list = $session->var_bind_list();

   if (!defined $list) {
      printf "ERROR: %s\n", $session->error();
      return;
   }

   # Loop through each of the OIDs in the response and assign
   # the key/value pairs to the reference that was passed with
   # the callback. Make sure that we are still in the table
   # before assigning the key/values.

   my @names = $session->var_bind_names();
   my $next  = undef;

   while (@names) {
      $next = shift @names;
      if (!oid_base_match($OID_Table, $next)) {
         return; # Table is done.
      }
      $table->{$next} = $list->{$next};
   }

   # Table is not done, send another request, starting at the last
   # OBJECT IDENTIFIER in the response. No need to include the
   # calback argument, the same callback that was specified for the
   # original request will be used.

   my $result = $session->get_bulk_request(
      -varbindlist    => [ $next ],
      -maxrepetitions => 10,
   );

   if (!defined $result) {
      printf "ERROR: %s.\n", $session->error();
   }

   return;
}

